#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4984
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="jcalluz")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertUser_jcalluz(User_jcalluz instance);
  partial void UpdateUser_jcalluz(User_jcalluz instance);
  partial void DeleteUser_jcalluz(User_jcalluz instance);
  partial void InsertRoom_jcalluz(Room_jcalluz instance);
  partial void UpdateRoom_jcalluz(Room_jcalluz instance);
  partial void DeleteRoom_jcalluz(Room_jcalluz instance);
  partial void InsertMessage_jcalluz(Message_jcalluz instance);
  partial void UpdateMessage_jcalluz(Message_jcalluz instance);
  partial void DeleteMessage_jcalluz(Message_jcalluz instance);
  partial void InsertLoggedInUser_jcalluz(LoggedInUser_jcalluz instance);
  partial void UpdateLoggedInUser_jcalluz(LoggedInUser_jcalluz instance);
  partial void DeleteLoggedInUser_jcalluz(LoggedInUser_jcalluz instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["jcalluzConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<User_jcalluz> User_jcalluzs
	{
		get
		{
			return this.GetTable<User_jcalluz>();
		}
	}
	
	public System.Data.Linq.Table<Room_jcalluz> Room_jcalluzs
	{
		get
		{
			return this.GetTable<Room_jcalluz>();
		}
	}
	
	public System.Data.Linq.Table<Message_jcalluz> Message_jcalluzs
	{
		get
		{
			return this.GetTable<Message_jcalluz>();
		}
	}
	
	public System.Data.Linq.Table<LoggedInUser_jcalluz> LoggedInUser_jcalluzs
	{
		get
		{
			return this.GetTable<LoggedInUser_jcalluz>();
		}
	}
}

[Table(Name="dbo.User_jcalluz")]
public partial class User_jcalluz : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserID;
	
	private string _Firstname;
	
	private string _Lastname;
	
	private string _Username;
	
	private string _Password;
	
	private char _Sex;
	
	private EntitySet<Message_jcalluz> _Message_jcalluzs;
	
	private EntitySet<Message_jcalluz> _Message_jcalluzs1;
	
	private EntitySet<LoggedInUser_jcalluz> _LoggedInUser_jcalluzs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnSexChanging(char value);
    partial void OnSexChanged();
    #endregion
	
	public User_jcalluz()
	{
		this._Message_jcalluzs = new EntitySet<Message_jcalluz>(new Action<Message_jcalluz>(this.attach_Message_jcalluzs), new Action<Message_jcalluz>(this.detach_Message_jcalluzs));
		this._Message_jcalluzs1 = new EntitySet<Message_jcalluz>(new Action<Message_jcalluz>(this.attach_Message_jcalluzs1), new Action<Message_jcalluz>(this.detach_Message_jcalluzs1));
		this._LoggedInUser_jcalluzs = new EntitySet<LoggedInUser_jcalluz>(new Action<LoggedInUser_jcalluz>(this.attach_LoggedInUser_jcalluzs), new Action<LoggedInUser_jcalluz>(this.detach_LoggedInUser_jcalluzs));
		OnCreated();
	}
	
	[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_Firstname", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Firstname
	{
		get
		{
			return this._Firstname;
		}
		set
		{
			if ((this._Firstname != value))
			{
				this.OnFirstnameChanging(value);
				this.SendPropertyChanging();
				this._Firstname = value;
				this.SendPropertyChanged("Firstname");
				this.OnFirstnameChanged();
			}
		}
	}
	
	[Column(Storage="_Lastname", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Lastname
	{
		get
		{
			return this._Lastname;
		}
		set
		{
			if ((this._Lastname != value))
			{
				this.OnLastnameChanging(value);
				this.SendPropertyChanging();
				this._Lastname = value;
				this.SendPropertyChanged("Lastname");
				this.OnLastnameChanged();
			}
		}
	}
	
	[Column(Storage="_Username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_Sex", DbType="VarChar(1) NOT NULL")]
	public char Sex
	{
		get
		{
			return this._Sex;
		}
		set
		{
			if ((this._Sex != value))
			{
				this.OnSexChanging(value);
				this.SendPropertyChanging();
				this._Sex = value;
				this.SendPropertyChanged("Sex");
				this.OnSexChanged();
			}
		}
	}
	
	[Association(Name="User_jcalluz_Message_jcalluz", Storage="_Message_jcalluzs", OtherKey="UserID")]
	public EntitySet<Message_jcalluz> Message_jcalluzs
	{
		get
		{
			return this._Message_jcalluzs;
		}
		set
		{
			this._Message_jcalluzs.Assign(value);
		}
	}
	
	[Association(Name="User_jcalluz_Message_jcalluz1", Storage="_Message_jcalluzs1", OtherKey="ToUserID")]
	public EntitySet<Message_jcalluz> Message_jcalluzs1
	{
		get
		{
			return this._Message_jcalluzs1;
		}
		set
		{
			this._Message_jcalluzs1.Assign(value);
		}
	}
	
	[Association(Name="User_jcalluz_LoggedInUser_jcalluz", Storage="_LoggedInUser_jcalluzs", OtherKey="UserID")]
	public EntitySet<LoggedInUser_jcalluz> LoggedInUser_jcalluzs
	{
		get
		{
			return this._LoggedInUser_jcalluzs;
		}
		set
		{
			this._LoggedInUser_jcalluzs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Message_jcalluzs(Message_jcalluz entity)
	{
		this.SendPropertyChanging();
		entity.User_jcalluz = this;
	}
	
	private void detach_Message_jcalluzs(Message_jcalluz entity)
	{
		this.SendPropertyChanging();
		entity.User_jcalluz = null;
	}
	
	private void attach_Message_jcalluzs1(Message_jcalluz entity)
	{
		this.SendPropertyChanging();
		entity.User_jcalluz1 = this;
	}
	
	private void detach_Message_jcalluzs1(Message_jcalluz entity)
	{
		this.SendPropertyChanging();
		entity.User_jcalluz1 = null;
	}
	
	private void attach_LoggedInUser_jcalluzs(LoggedInUser_jcalluz entity)
	{
		this.SendPropertyChanging();
		entity.User_jcalluz = this;
	}
	
	private void detach_LoggedInUser_jcalluzs(LoggedInUser_jcalluz entity)
	{
		this.SendPropertyChanging();
		entity.User_jcalluz = null;
	}
}

[Table(Name="dbo.Room_jcalluz")]
public partial class Room_jcalluz : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _RoomID;
	
	private string _Name;
	
	private EntitySet<Message_jcalluz> _Message_jcalluzs;
	
	private EntitySet<LoggedInUser_jcalluz> _LoggedInUser_jcalluzs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Room_jcalluz()
	{
		this._Message_jcalluzs = new EntitySet<Message_jcalluz>(new Action<Message_jcalluz>(this.attach_Message_jcalluzs), new Action<Message_jcalluz>(this.detach_Message_jcalluzs));
		this._LoggedInUser_jcalluzs = new EntitySet<LoggedInUser_jcalluz>(new Action<LoggedInUser_jcalluz>(this.attach_LoggedInUser_jcalluzs), new Action<LoggedInUser_jcalluz>(this.detach_LoggedInUser_jcalluzs));
		OnCreated();
	}
	
	[Column(Storage="_RoomID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int RoomID
	{
		get
		{
			return this._RoomID;
		}
		set
		{
			if ((this._RoomID != value))
			{
				this.OnRoomIDChanging(value);
				this.SendPropertyChanging();
				this._RoomID = value;
				this.SendPropertyChanged("RoomID");
				this.OnRoomIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="Room_jcalluz_Message_jcalluz", Storage="_Message_jcalluzs", OtherKey="RoomID")]
	public EntitySet<Message_jcalluz> Message_jcalluzs
	{
		get
		{
			return this._Message_jcalluzs;
		}
		set
		{
			this._Message_jcalluzs.Assign(value);
		}
	}
	
	[Association(Name="Room_jcalluz_LoggedInUser_jcalluz", Storage="_LoggedInUser_jcalluzs", OtherKey="RoomID")]
	public EntitySet<LoggedInUser_jcalluz> LoggedInUser_jcalluzs
	{
		get
		{
			return this._LoggedInUser_jcalluzs;
		}
		set
		{
			this._LoggedInUser_jcalluzs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Message_jcalluzs(Message_jcalluz entity)
	{
		this.SendPropertyChanging();
		entity.Room_jcalluz = this;
	}
	
	private void detach_Message_jcalluzs(Message_jcalluz entity)
	{
		this.SendPropertyChanging();
		entity.Room_jcalluz = null;
	}
	
	private void attach_LoggedInUser_jcalluzs(LoggedInUser_jcalluz entity)
	{
		this.SendPropertyChanging();
		entity.Room_jcalluz = this;
	}
	
	private void detach_LoggedInUser_jcalluzs(LoggedInUser_jcalluz entity)
	{
		this.SendPropertyChanging();
		entity.Room_jcalluz = null;
	}
}

[Table(Name="dbo.Message_jcalluz")]
public partial class Message_jcalluz : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _MessageID;
	
	private System.Nullable<int> _RoomID;
	
	private int _UserID;
	
	private System.Nullable<int> _ToUserID;
	
	private string _Text;
	
	private System.DateTime _TimeStamp;
	
	private string _Color;
	
	private EntityRef<Room_jcalluz> _Room_jcalluz;
	
	private EntityRef<User_jcalluz> _User_jcalluz;
	
	private EntityRef<User_jcalluz> _User_jcalluz1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIDChanging(int value);
    partial void OnMessageIDChanged();
    partial void OnRoomIDChanging(System.Nullable<int> value);
    partial void OnRoomIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnToUserIDChanging(System.Nullable<int> value);
    partial void OnToUserIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    #endregion
	
	public Message_jcalluz()
	{
		this._Room_jcalluz = default(EntityRef<Room_jcalluz>);
		this._User_jcalluz = default(EntityRef<User_jcalluz>);
		this._User_jcalluz1 = default(EntityRef<User_jcalluz>);
		OnCreated();
	}
	
	[Column(Storage="_MessageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int MessageID
	{
		get
		{
			return this._MessageID;
		}
		set
		{
			if ((this._MessageID != value))
			{
				this.OnMessageIDChanging(value);
				this.SendPropertyChanging();
				this._MessageID = value;
				this.SendPropertyChanged("MessageID");
				this.OnMessageIDChanged();
			}
		}
	}
	
	[Column(Storage="_RoomID", DbType="Int")]
	public System.Nullable<int> RoomID
	{
		get
		{
			return this._RoomID;
		}
		set
		{
			if ((this._RoomID != value))
			{
				if (this._Room_jcalluz.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoomIDChanging(value);
				this.SendPropertyChanging();
				this._RoomID = value;
				this.SendPropertyChanged("RoomID");
				this.OnRoomIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._User_jcalluz.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_ToUserID", DbType="Int")]
	public System.Nullable<int> ToUserID
	{
		get
		{
			return this._ToUserID;
		}
		set
		{
			if ((this._ToUserID != value))
			{
				if (this._User_jcalluz1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnToUserIDChanging(value);
				this.SendPropertyChanging();
				this._ToUserID = value;
				this.SendPropertyChanged("ToUserID");
				this.OnToUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_Text", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Text
	{
		get
		{
			return this._Text;
		}
		set
		{
			if ((this._Text != value))
			{
				this.OnTextChanging(value);
				this.SendPropertyChanging();
				this._Text = value;
				this.SendPropertyChanged("Text");
				this.OnTextChanged();
			}
		}
	}
	
	[Column(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
	public System.DateTime TimeStamp
	{
		get
		{
			return this._TimeStamp;
		}
		set
		{
			if ((this._TimeStamp != value))
			{
				this.OnTimeStampChanging(value);
				this.SendPropertyChanging();
				this._TimeStamp = value;
				this.SendPropertyChanged("TimeStamp");
				this.OnTimeStampChanged();
			}
		}
	}
	
	[Column(Storage="_Color", DbType="VarChar(50)")]
	public string Color
	{
		get
		{
			return this._Color;
		}
		set
		{
			if ((this._Color != value))
			{
				this.OnColorChanging(value);
				this.SendPropertyChanging();
				this._Color = value;
				this.SendPropertyChanged("Color");
				this.OnColorChanged();
			}
		}
	}
	
	[Association(Name="Room_jcalluz_Message_jcalluz", Storage="_Room_jcalluz", ThisKey="RoomID", IsForeignKey=true)]
	public Room_jcalluz Room_jcalluz
	{
		get
		{
			return this._Room_jcalluz.Entity;
		}
		set
		{
			Room_jcalluz previousValue = this._Room_jcalluz.Entity;
			if (((previousValue != value) 
						|| (this._Room_jcalluz.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Room_jcalluz.Entity = null;
					previousValue.Message_jcalluzs.Remove(this);
				}
				this._Room_jcalluz.Entity = value;
				if ((value != null))
				{
					value.Message_jcalluzs.Add(this);
					this._RoomID = value.RoomID;
				}
				else
				{
					this._RoomID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Room_jcalluz");
			}
		}
	}
	
	[Association(Name="User_jcalluz_Message_jcalluz", Storage="_User_jcalluz", ThisKey="UserID", IsForeignKey=true)]
	public User_jcalluz User_jcalluz
	{
		get
		{
			return this._User_jcalluz.Entity;
		}
		set
		{
			User_jcalluz previousValue = this._User_jcalluz.Entity;
			if (((previousValue != value) 
						|| (this._User_jcalluz.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User_jcalluz.Entity = null;
					previousValue.Message_jcalluzs.Remove(this);
				}
				this._User_jcalluz.Entity = value;
				if ((value != null))
				{
					value.Message_jcalluzs.Add(this);
					this._UserID = value.UserID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("User_jcalluz");
			}
		}
	}
	
	[Association(Name="User_jcalluz_Message_jcalluz1", Storage="_User_jcalluz1", ThisKey="ToUserID", IsForeignKey=true)]
	public User_jcalluz User_jcalluz1
	{
		get
		{
			return this._User_jcalluz1.Entity;
		}
		set
		{
			User_jcalluz previousValue = this._User_jcalluz1.Entity;
			if (((previousValue != value) 
						|| (this._User_jcalluz1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User_jcalluz1.Entity = null;
					previousValue.Message_jcalluzs1.Remove(this);
				}
				this._User_jcalluz1.Entity = value;
				if ((value != null))
				{
					value.Message_jcalluzs1.Add(this);
					this._ToUserID = value.UserID;
				}
				else
				{
					this._ToUserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User_jcalluz1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.LoggedInUser_jcalluz")]
public partial class LoggedInUser_jcalluz : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _LoggedInUserID;
	
	private int _UserID;
	
	private int _RoomID;
	
	private EntityRef<Room_jcalluz> _Room_jcalluz;
	
	private EntityRef<User_jcalluz> _User_jcalluz;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoggedInUserIDChanging(int value);
    partial void OnLoggedInUserIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    #endregion
	
	public LoggedInUser_jcalluz()
	{
		this._Room_jcalluz = default(EntityRef<Room_jcalluz>);
		this._User_jcalluz = default(EntityRef<User_jcalluz>);
		OnCreated();
	}
	
	[Column(Storage="_LoggedInUserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int LoggedInUserID
	{
		get
		{
			return this._LoggedInUserID;
		}
		set
		{
			if ((this._LoggedInUserID != value))
			{
				this.OnLoggedInUserIDChanging(value);
				this.SendPropertyChanging();
				this._LoggedInUserID = value;
				this.SendPropertyChanged("LoggedInUserID");
				this.OnLoggedInUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._User_jcalluz.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_RoomID", DbType="Int NOT NULL")]
	public int RoomID
	{
		get
		{
			return this._RoomID;
		}
		set
		{
			if ((this._RoomID != value))
			{
				if (this._Room_jcalluz.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoomIDChanging(value);
				this.SendPropertyChanging();
				this._RoomID = value;
				this.SendPropertyChanged("RoomID");
				this.OnRoomIDChanged();
			}
		}
	}
	
	[Association(Name="Room_jcalluz_LoggedInUser_jcalluz", Storage="_Room_jcalluz", ThisKey="RoomID", IsForeignKey=true)]
	public Room_jcalluz Room_jcalluz
	{
		get
		{
			return this._Room_jcalluz.Entity;
		}
		set
		{
			Room_jcalluz previousValue = this._Room_jcalluz.Entity;
			if (((previousValue != value) 
						|| (this._Room_jcalluz.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Room_jcalluz.Entity = null;
					previousValue.LoggedInUser_jcalluzs.Remove(this);
				}
				this._Room_jcalluz.Entity = value;
				if ((value != null))
				{
					value.LoggedInUser_jcalluzs.Add(this);
					this._RoomID = value.RoomID;
				}
				else
				{
					this._RoomID = default(int);
				}
				this.SendPropertyChanged("Room_jcalluz");
			}
		}
	}
	
	[Association(Name="User_jcalluz_LoggedInUser_jcalluz", Storage="_User_jcalluz", ThisKey="UserID", IsForeignKey=true)]
	public User_jcalluz User_jcalluz
	{
		get
		{
			return this._User_jcalluz.Entity;
		}
		set
		{
			User_jcalluz previousValue = this._User_jcalluz.Entity;
			if (((previousValue != value) 
						|| (this._User_jcalluz.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User_jcalluz.Entity = null;
					previousValue.LoggedInUser_jcalluzs.Remove(this);
				}
				this._User_jcalluz.Entity = value;
				if ((value != null))
				{
					value.LoggedInUser_jcalluzs.Add(this);
					this._UserID = value.UserID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("User_jcalluz");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
